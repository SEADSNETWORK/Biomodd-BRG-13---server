{"version":3,"sources":["theme/index.js","theme/pages/overview.jsx","reducers/DataReducer.js","rootreducer.js","Store.js","client/environment.js","client/index.jsx","services/TableauConnector.js","components/connectors.jsx","App.js","serviceWorker.js","index.js"],"names":["OverviewPage","useSelector","state","data","theme","themes","Container","Wrapped","Theme","this","colors","primary","secondary","tertiary","text","defaultWrapWidth","font","sizes","normal","title","subtitle","medias","em","xs","sm","md","lg","px","query","onlySmall","largerthansm","mdandup","smallerthanmd","padding","pre","values","post","styled","children","EmptyDiv","content","defaultWrap","responsive","EmptySpan","defaultFont","div","props","border","span","ACTIONS","Object","freeze","SET_CLIENT","Symbol","SET_NAV_OPEN","SET_THEME","SET_THEMES","initialState","client","navopen","window","innerWidth","rootReducer","combineReducers","action","type","middleware","applyMiddleware","thunkMiddleware","Store","createStore","envi","dev","location","hostname","status","document","printstatus","console","log","prevFetched","dispatch","environment","_","settings","sc","sanityClient","projectId","dataset","token","ignoreBrowserTokenWarning","useCdn","builder","imageUrlBuilder","fetch","Promise","resolve","reject","then","catch","squareImage","url","width","image","height","makeConnector","tableau","connector","getCols","cols","addCol","id","dataType","alias","push","dataTypeEnum","string","datetime","schemas","all","columns","today","todayAndLater","submit","connectionName","init","getSchema","schemaCallback","getData","table","doneCallback","href","indexOf","axios","get","tableInfo","map","start","moment","Date","format","end","created","appendRows","registerConnector","Button","onClick","style","background","textTransform","useState","tc","setTc","useEffect","newTc","Text","BuilderTheme","DataHelper","useDispatch","cli","sanityclient","DATA_ACTIONS","Home","App","history","createBrowserHistory","store","src","float","fontSize","exact","path","component","exacact","Connectors","Boolean","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.44bf87df.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport \"./theme.css\"\nimport Overview from './pages/overview'\nimport {Grid as Grid_, Col as Col_, Row as Row_} from 'react-styled-flexboxgrid';\n/* \n    - TOAST\n    - support multiple themes\n    - set basic html (background etc)\n    - build in version control\n    - Text\n    - Title\n    - Subtitle\n    - Container\n    - CollapsibleContainer\n    - Button\n*/\n\nexport const OverviewPage = Overview;\n\nlet settings = {\n    \n};\n\nclass Theme {\n    constructor() {\n        this.colors = {\n          primary: \"black\",\n          secondary: \"white\",\n          tertiary: \"red\"\n        };\n\n        this.colors.text = {\n            primary: this.colors.secondary,\n            secondary: this.colors.primary\n        }\n\n        this.defaultWrapWidth = 3;\n\n        this.font = \"American Typewriter\"\n\n        this.sizes = {\n            normal: \"1.6em\",\n            title: \"3em\",\n            subtitle: \"2.5em\"\n        }\n\n        this.medias = {\n          em: {\n            xs: 0,  \n            sm: 48, \n            md: 64, \n            lg: 75\n          }, \n          px: {\n            xs: 0,  \n            sm: 768, \n            md: 1024, \n            lg: 5625\n          }\n        }\n\n        this.medias.query = {\n            onlySmall : `(max-width: ${this.medias.px.sm}px)`,\n            largerthansm : `(min-width: ${this.medias.px.sm+1}px)`,\n            mdandup : `(min-width: ${this.medias.px.md}px)`,\n            smallerthanmd : `(max-width: ${this.medias.px.md-1}px)`\n        }\n\n        this.padding = {\n            xs: 10,  \n            sm: 15, \n            md: 20, \n            lg: 30\n        };\n    }\n    \n    /**\n     * HELPERS\n     */\n    get defaultWrap(){\n        return `solid ${this.colors.primary} ${this.defaultWrapWidth}px`\n    }\n\n    get defaultFont(){\n        return `font-family : ${this.font}; font-size: ${this.sizes.normal};`\n    }\n\n    get styled(){\n        return styled;\n    }\n\n    responsive(pre, values, post){\n        return `\n            ${pre}: ${values.xs}${post};\n\n            @media only screen and (min-width: ${this.medias.px.sm}px) {\n                ${pre}: ${values.sm}${post};\n            }\n\n            @media only screen and (min-width: ${this.medias.px.md}px) {\n                ${pre}: ${values.md}${post};\n            }        \n\n            @media only screen and (min-width: ${this.medias.px.lg}px) {\n                ${pre}: ${values.lg}${post};\n            }        \n        `\n    }\n    \n    /**\n     * COMPONENTS\n     */\n    /**\n     * wrapping\n     */\n    get Wrapped(){\n        return ({children})=><EmptyDiv content={`border : ${this.defaultWrap}; background: white;`}>{children}</EmptyDiv>\n    }\n\n    get Container(){\n        return ({children})=><EmptyDiv content={this.responsive(\"padding\", this.padding, 'px')}>{children}</EmptyDiv>\n    }\n\n    get Text(){\n        return ({children})=><EmptySpan content={this.defaultFont}>{children}</EmptySpan>\n    }\n\n    // get Container(){\n    //     return styled.div`\n    //         padding: ${this.padding}\n    //     `\n    // }\n\n    // /**\n    //  * typography\n    //  */\n    // get Text(){\n    //     return styled.p`\n    //         ${this.defaultFont}\n    //     `\n    // }\n\n    // get Title(){\n    //     return styled.div`\n    //         ${this.defaultFont}\n    //         font-size: ${this.sizes.title}; \n    //         text-align: center;\n    //     `\n    // }\n\n    // get SubTitle(){\n    //     return styled(this.Title)`\n    //         font-size: ${this.sizes.subtitle}; \n    //     `\n    // }\n\n    // /**\n    //  * grid\n    //  */\n    // get Grid(){\n    //     return styled(Grid_)`\n    //         margin: 0px;\n    //         padding: 0px;\n    //         width: 100%;\n    //     `\n    // }\n\n    // get Row(){return Row_};\n    // get Col(){return Col_};\n}\n\nconst Wrapped = styled.div`\n    border: ${props=>props.border}\n`\n\nconst EmptyDiv = styled.div`\n    ${props=>props.content}\n    \n`\n\nconst EmptySpan = styled.span`\n    ${props=>props.content}\n`\n\n\nexport default Theme;","import React from 'react'\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Theme from '..';\n\nexport default ()=>{\n    const [theme, themes] = useSelector(state => [state.data.theme, state.data.themes]);\n\n\n    if (!theme){\n        return \"loading\"\n    } else {\n        return <theme.Container>\n                    <theme.Wrapped>\n                        <theme.Container>\n                            allo\n                        </theme.Container>\n                    </theme.Wrapped>\n            </theme.Container> \n    }\n}","export const ACTIONS = Object.freeze({\n    SET_CLIENT: Symbol(\"data/client\"),\n    SET_NAV_OPEN: Symbol('data/navopen'),\n    SET_THEME: Symbol('data/theme'),\n    SET_THEMES: Symbol('data/themes'),\n});\n\nconst initialState = {\n  client: null,\n  navopen: window.innerWidth > 768,\n  theme: null,\n  themes: null\n};\n\nexport default (state = initialState, action) => {\n  \n  switch (action.type) {\n    case ACTIONS.SET_CLIENT: {\n      return {\n        ...state,\n        client: action.client\n      };\n    }\n    case ACTIONS.SET_NAV_OPEN: {\n      return {\n        ...state,\n        navopen: action.navopen\n      };\n    }\n    case ACTIONS.SET_THEME: {\n      return {\n        ...state,\n        theme: action.theme\n      };\n    }\n    case ACTIONS.SET_THEMES: {\n      return {\n        ...state,\n        themes: action.themes\n      };\n    }\n    default: {\n      return {\n        ...state\n      };\n    }\n  } \n};\n","import { combineReducers } from \"redux\";\nimport data from './reducers/DataReducer';\n\nconst rootReducer = combineReducers({\n  data\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\n\nimport thunkMiddleware from \"redux-thunk\";\n\nimport rootReducer from \"./rootreducer\";\n\nconst middleware = applyMiddleware(thunkMiddleware);\n\nconst Store = createStore(rootReducer, middleware);\n\nexport default Store;\n","export const envi = ()=>{\n    const dev = (window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\");\n    const status = (()=>{return `Running ${dev?'local':'server'}`})()\n    const printstatus = ()=>{\n        console.log(status);\n    }\n\n    if (dev){\n        document.title = \" (local) \" + document.title;\n    }\n    \n    return {\n        dev,\n        status,\n        printstatus\n    }   \n}\n\nexport default envi","import sanityClient from '@sanity/client'\nimport envi from './environment'\nimport {settings} from './connector_settings.json'\n// import { ACTIONS as DATA_ACTIONS } from \"../reducers/DataReducer\"\n// import toast from '../services/toast'\nimport imageUrlBuilder from '@sanity/image-url'\n\nconst prevFetched = {};\n\nexport const client = (dispatch)=>{\n    const environment = envi();\n    let _ = settings;\n    const sc = sanityClient({\n        projectId: _.projectId,\n        dataset: _.dataset,\n        token: _.token, // or leave blank to be anonymous user\n        ignoreBrowserTokenWarning: true,\n        useCdn: false\n    })\n\n    const fetch = (query)=>{\n        return new Promise((resolve, reject)=>{\n            if (prevFetched[query]){\n                if (environment.dev){\n                    console.log(\"reused cached query\");\n                }\n                resolve(prevFetched[query]);\n            } else {\n                sc.fetch(query)\n                .then((data)=>{\n                    prevFetched[query] = data;\n                    resolve(data);\n                }).catch(reject);\n            }\n        })\n    }\n\n    const builder = imageUrlBuilder(sc)\n\n    const squareImage = (url, width)=>{\n        return builder.image(url).width(width).height(width).url();\n    }\n\n    \n    if (environment.dev){\n        environment.printstatus()\n    } \n\n    return {\n        fetch,\n        environment,\n        squareImage\n    }\n}\n\n\n\nexport default client;\n\n","\nimport axios from 'axios'\nimport moment from 'moment'\n\nconst makeConnector = ()=>{\n    const tableau = window.tableau;\n    const connector =  tableau.makeConnector();\n\n    const getCols = ()=>{\n        const cols = [];\n        const addCol = (id, dataType, alias)=>{\n            cols.push({id, dataType, alias});\n        }\n\n        addCol(\"_id\", tableau.dataTypeEnum.string, \"id\");\n        addCol(\"action\", tableau.dataTypeEnum.string, \"status\");\n        addCol(\"organization\", tableau.dataTypeEnum.string);\n        addCol(\"service\", tableau.dataTypeEnum.string);\n        addCol(\"location\", tableau.dataTypeEnum.string);\n        addCol(\"name\", tableau.dataTypeEnum.string);\n        addCol(\"firstName\", tableau.dataTypeEnum.string);\n        addCol(\"studentNumber\", tableau.dataTypeEnum.string);\n        addCol(\"email\", tableau.dataTypeEnum.string);\n        addCol(\"timezone\", tableau.dataTypeEnum.string);\n        addCol(\"start\", tableau.dataTypeEnum.datetime);\n        addCol(\"end\", tableau.dataTypeEnum.datetime);\n        addCol(\"created\", tableau.dataTypeEnum.datetime);\n        return cols;\n    }\n\n    const schemas = {\n        all :           {        \n            id: \"all\",\n            alias: \"reservations: all\",\n            columns: getCols()\n        },\n        today :         {\n            id: \"today\",\n            alias: \"reservations: today\",\n            columns: getCols()\n        },\n        todayAndLater : {\n            id: \"todayAndLater\",\n            alias: \"reservations: today and later\",\n            columns: getCols()\n        },\n    }\n\n\n    const init = (cols)=>{\n        \n        // Define the schema\n        connector.getSchema = function(schemaCallback) {\n            schemaCallback([schemas.all, schemas.today, schemas.todayAndLater]);\n        };\n\n\n        // Download the data\n        connector.getData = function(table, doneCallback) {\n            let url = \"/data\";\n            if (window.location.href.indexOf(\"3000\")!==-1){\n                url = \"http://localhost:2000\"+url;\n            }\n\n            axios.get(url+`?selector=${table.tableInfo.id}`)\n                    .then(({data})=>{\n                        data = data.map((values)=>{\n                            var dateFormat = \"Y-MM-DD HH:mm:ss\";\n                            values.start    = moment(new Date(values.start)).format(dateFormat);\n                            values.end      = moment(new Date(values.end)).format(dateFormat);\n                            values.created      = moment(new Date(values.created)).format(dateFormat);\n                            return values;\n                        })\n                        table.appendRows(data);\n                        doneCallback();\n            })\n        };\n\n        tableau.registerConnector(connector);\n    }\n\n    const submit = ()=>{\n        tableau.connectionName = \"LUCA Reservations\"; // This will be the data source name in Tableau\n        tableau.submit(); // This sends the connector object to Tableau\n    }\n    \n    return {\n        submit,\n        init\n    }\n}\n\nexport default makeConnector;","import React, {useState, useEffect} from 'react'\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Theme from '../theme/';\nimport {Grid, Col, Row } from 'react-styled-flexboxgrid';\nimport makeConnector from '../services/TableauConnector';\n\n\nconst tableau = window.tableau;\n\nconst Button = ({text, onClick})=>{\n    return <button onClick={onClick} style={{padding: \"5px\", background: \"inherit\", textTransform: \"uppercase\", width: \"100%\", border: \"3px solid black\", background: \"black\", color: \"white\", fontSize: \"79%\"}}>{text}</button>\n}\n\nexport default ()=>{\n    const [theme, themes] = useSelector(state => [state.data.theme, state.data.themes]);\n    const [tc, setTc] = useState(null);\n\n    useEffect(() => {\n        if (!tc){\n            let newTc = makeConnector();\n            newTc.init();\n            setTc(newTc);    \n        }\n    });   \n\n    if (!theme){\n        return \"loading\"\n    } else {\n        return <Grid style={{}}>\n                <br/><br/>\n                <theme.Container>\n                    <theme.Wrapped>\n                        <theme.Container>\n                            <theme.Text>\n                                <b>Connectors</b>\n                                <br /><br />\n                                {tc?<Row>\n                                    <Col xs={12} sm={4}>\n                                        <Button text=\"go\" onClick={()=>{\n                                            tc.submit()\n                                        }} />\n                                    </Col>\n                                </Row>:null}\n                            </theme.Text>\n                        </theme.Container>\n                    </theme.Wrapped>\n            </theme.Container> \n        </Grid>\n         \n    }\n}","import React, {useEffect} from 'react';\nimport Theme, {OverviewPage} from './theme'\nimport { Provider } from \"react-redux\";\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport Store from \"./Store\";\nimport { createBrowserHistory } from 'history';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ACTIONS as DATA_ACTIONS } from \"./reducers/DataReducer\"\nimport sanityclient from './client';\nimport Connectors from './components/connectors'\n\nimport './assets/fonts/'\n\nclass BuilderTheme extends Theme {\n  constructor(){\n    super()\n    this.font = \"OfficeCodePro\"\n    this.sizes.normal = \"1.3em\"\n  }\n\n  get defaultFont(){\n    return `${super.defaultFont}font-weight: 400;`\n  }\n\n  get Title(){\n    return this.styled(super.Title)` font-weight: bold;`\n  }\n}\n\nconst DataHelper = () => {\n  const data = useSelector(state => state.data);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!data.client && dispatch){\n      const cli = sanityclient(dispatch);\n      dispatch({ type: DATA_ACTIONS.SET_CLIENT, client: cli});\n    } \n\n    if (!data.theme && dispatch ){\n      const builder = new BuilderTheme();\n      dispatch({type: DATA_ACTIONS.SET_THEME, theme: new BuilderTheme()})\n      // dispatch({type: DATA_ACTIONS.SET_THEMES, themes: [new BuilderTheme()]})\n    }\n\n  })\n  return (\n    null\n  )\n}\n\nconst Home = ()=>{\n  const theme = new BuilderTheme();\n\n  return <theme.Container>\n    <br/><br/>\n    <theme.Wrapped>\n    <theme.Text>\n      Een schone toevalligheid\n    </theme.Text>\n  </theme.Wrapped>\n  </theme.Container>\n}\n\nconst App =()=>{\n  const history = createBrowserHistory()\n  const theme = new BuilderTheme();\n\n  return (\n    <Provider store={Store}>\n    <DataHelper />\n      <Router history={history}>\n        <span>\n          <div style={{padding: \"10px\"}}>\n        <img src=\"https://www.luca-arts.be/themes/custom/epsenkaas_theme/logo.svg\" style={{float: \"left\"}}/>\n        <div style={{fontSize: \"200%\"}}>\n          <theme.Text>\n              &nbsp;Reservator\n          </theme.Text>\n        </div>\n        </div>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exacact path=\"/overview\" component={OverviewPage} />\n              <Route exacact path=\"/connectors\" component={Connectors} />\n              <Route component={Home}/>\n            </Switch>\n        </span>\n      </Router>\n  </Provider>\n  );\n}\n\n// function App() {\n//   let theme = new BuilderTheme();\n//   return (\n//     <div style={{fontWeight: \"lighter\"}}>\n//       hello\n//       <div style={{fontFamily: \"Bluu Next\"}}>\n//           Studio Subtiv\n//       </div>\n//       <theme.Wrapped>\n//         <theme.Text>\n//           hello\n//         </theme.Text>\n//         <theme.Title>\n//           hello\n//         </theme.Title>\n//       </theme.Wrapped>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n// import './assets/fonts/OCP'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}